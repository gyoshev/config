[user]
    name = Alex Gyoshev
    email = alex@gyoshev.net
[color]
    ui = true
[diff]
    algorithm = patience
[difftool]
    prompt = false
[merge]
    tool = fugitive
[mergetool "fugitive"]
    cmd = vim -c \"Gdiff\" \"$MERGED\"
[mergetool]
    keepBackup = false
[alias]
    c = commit -m
    ci = commit
    ca = commit --amend
    co = checkout
    cp = cherry-pick
    current = rev-parse --abbrev-ref HEAD
    tracked = rev-parse --abbrev-ref --symbolic-full-name @{u}
    a = add
    d = diff
    dic = diff --cached
    s = status
    st = status
    out = log origin..HEAD
    l = log --all --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset %C(cyan)%an%Creset' --abbrev-commit --date=relative

    # pull --rebase, and preserve merge commits
    pl = "!f() { git fetch --prune; git rebase --preserve-merges `git tracked` ; }; f"

    sync = "!f() { git pl && git push ; }; f"

    # cherry-pick from ... to ...
    cpf2 = "!f() { git checkout $2 && git pull --rebase && git cherry-pick $1 && git push && git checkout $1 ; }; f"

    # cherry-pick from current to ....
    cp2 = "!f() { git cpf2 `git current` $1 ; }; f"

    # cherry-pick from master to production
    cpp = "!f() { git cpf2 master production ; }; f"

    # edit / add unmerged files
    eu = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
    au = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"

    # show parent (mommy) branch
    mom = "!git show-branch | ack '\\*' | ack -v \"`git current`\" | head -n1 | sed 's/.*\\[\\(.*\\)\\].*/\\1/' | sed 's/[\\^~].*//'"

    #############################
    # public/private mirrors aliases
    #############################

    # bring commits from public repo to private
    put-in-master = "!git checkout master && git pull --rebase && git cherry-pick core/master && git push && git checkout core-master"

    # drop cherry-picks of private files
    drop-deleted-by-us = "!git rm `git status --porcelain | grep ^DU | cut -d' ' -f2`"

    # update private marker after all commits are ported from public to private
    updated-core-tag = "!git tag -f r-private core/master && git push -f core r-private;"

    # update public marker after all commits are ported from private to public
    updated-master-tag = "!git tag -f r-public origin/master && git push -f origin r-public;"

    # skip a cherry-pick in progress
    skip-cherry = "!git reset; git cherry-pick --continue"

[core]
    autocrlf = input
    whitespace = cr-at-eol
[push]
    default = tracking
[branch]
    autosetuprebase = always
