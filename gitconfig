[user]
    name = Alex Gyoshev
    email = aleksander.gyoshev@leanplum.com
    signingkey = 96174D3CD53476C5
[color]
    ui = true
[diff]
    algorithm = patience
[difftool]
    prompt = false
[merge]
    tool = meld
[mergetool "fugitive"]
    cmd = vim -c \"Gdiff\" \"$MERGED\"
[mergetool "meld"]
    cmd = meld --diff \"$BASE\" \"$LOCAL\" \"$REMOTE\" --output \"$MERGED\"
[mergetool]
    keepBackup = false
[alias]
    c = commit -m
    ci = commit
    ca = commit --amend
    co = checkout
    cp = cherry-pick
    current = rev-parse --abbrev-ref HEAD
    tracked = rev-parse --abbrev-ref --symbolic-full-name @{u}
    a = add
    d = diff
    dic = diff --cached
    s = status
    st = status
    out = log origin..HEAD
    l = log --all --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset %C(cyan)%an%Creset' --abbrev-commit --date=relative
    rcont = rebase --continue

    # pull --rebase, and preserve merge commits
    pl = "!f() { git fetch --prune; git rebase --preserve-merges `git tracked` ; }; f"

    sync = "!f() { git pl && git push ; }; f"

    stash-sync = "!f() { git stash && git sync && git stash pop ; }; f"

    # cherry-pick from ... to ...
    cpf2 = "!f() { git checkout $2 && git pull --rebase && git cherry-pick $1 && git push && git checkout $1 ; }; f"

    # cherry-pick from current to ....
    cp2 = "!f() { git cpf2 `git current` $1 ; }; f"

    # edit / add unmerged files
    eu = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
    au = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"

    # show parent (mommy) branch
    mom = "!git show-branch | ack '\\*' | ack -v \"`git current`\" | head -n1 | sed 's/.*\\[\\(.*\\)\\].*/\\1/' | sed 's/[\\^~].*//'"

    # drop cherry-picks of private files
    drop-deleted-by-us = "!git rm `git status --porcelain | grep ^DU | cut -d' ' -f2`"

    # add non-whitespace changes
    addnw = "!f() { git diff -U0 -w --no-color $@ | git apply --cached --ignore-whitespace --unidiff-zero ; }; f"

    # remove branches with gone upstreams
    clean-gone-branches = "!f() { git branch -vv | grep ': gone]' | awk '{print $1}' | xargs git branch -D ; }; f"


[core]
    autocrlf = false
[push]
    default = tracking
[branch]
    autosetuprebase = always
[commit]
    template = ~/.gitmessage
    gpgsign = true
[gpg]
    program = gpg2
[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true
